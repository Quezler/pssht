#!/usr/bin/env php
<?php

/*
* This file is part of pssht.
*
* (c) FranÃ§ois Poirotte <clicky@erebot.net>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/

require_once(
    dirname(__DIR__) .
    DIRECTORY_SEPARATOR . 'vendor' .
    DIRECTORY_SEPARATOR . 'autoload.php'
);

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;
use Clicky\Pssht\Client;

function escape($data)
{
    return addcslashes($data, "\x00..\x1F\x7F..\xFF");
}

function main()
{
    $container  = new ContainerBuilder();
    $loader     = new XmlFileLoader($container, new FileLocator(getcwd()));
    $loader->load('pssht.xml');

    $logging    = Plop::getInstance();
    $sockets    = array('servers' => array(), 'clients' => array());
    $clients    = array();

    $listen     = (array) $container->getParameter('listen');
    foreach ($listen as $spec) {
        $socket                 = stream_socket_server("tcp://$spec");
        $sockets['servers'][]   = $socket;
        $address                = stream_socket_get_name($socket, FALSE);
        $logging->info("Listening for new connections on %s", array($address));
    }

    while (TRUE) {
        $read   = array_merge($sockets['servers'], $sockets['clients']);
        $except = $read;
        $write  = array();

        foreach ($clients as $id => $client) {
            if (count($client->getEncoder()->getBuffer()))
                $write[] = $sockets['clients'][$id];
        }

        if (stream_select($read, $write, $except, NULL) === FALSE) {
            echo socket_strerror(socket_last_error()) . PHP_EOL;
            foreach ($sockets as $socketType) {
                foreach ($socketType as &$socket) {
                    fclose($socket);
                }
            }
            exit(1);
        }

        foreach ($read as $socket) {
            if (in_array($socket, $sockets['servers'], TRUE)) {
                $new = stream_socket_accept($socket);
                if ($new === FALSE) {
                    echo socket_strerror(socket_last_error()) . PHP_EOL;
                }
                else {
                    $sockets['clients'][] = $new;
                    $id     = array_search($new, $sockets['clients'], TRUE);
                    $peer   = stream_socket_get_name($new, TRUE);
                    $logging->info(
                        '#%(id)d New client connected from %(peer)s',
                        array('id' => $id, 'peer' => $peer)
                    );
                    $clients[$id] = $container->get('client');
                }
                continue;
            }

            $data = fread($socket, 8192);
            if ($data === '') {
                foreach ($except as $socket) {
                    if (in_array($socket, $sockets['servers'], TRUE)) {
                        continue;
                    }

                    $peer   = stream_socket_get_name($socket, TRUE);
                    $id     = array_search($socket, $sockets['clients'], TRUE);
                    $logging->info(
                        '#%(id)d Client disconnected from %(peer)s',
                        array('id' => $id, 'peer' => $peer)
                    );
                    fclose($socket);
                    unset($sockets['clients'][$id]);
                    unset($clients[$id]);
                }
                continue;
            }

            if ($data !== FALSE) {
                $peer   = stream_socket_get_name($socket, TRUE);
                $length = strlen($data);
                $id     = array_search($socket, $sockets['clients'], TRUE);
                $clients[$id]->getDecoder()->getBuffer()->push($data);

                $logging->info(
                    '#%(id)d Received %(length)d bytes from %(peer)s',
                    array('id' => $id, 'peer' => $peer, 'length' => $length)
                );
                $logging->info('%s', array(escape($data)));

                // Process messages in the buffer.
                while ($clients[$id]->readMessage()) ;
            }
        }

        foreach ($write as $socket) {
            $id = array_search($socket, $sockets['clients'], TRUE);
            if ($id === FALSE)
                continue;

            $peer   = stream_socket_get_name($socket, TRUE);
            $buffer = $clients[$id]->getEncoder()->getBuffer();
            $size   = count($buffer);
            $data   = $buffer->get($size);
            while ($size > 0) {
                $written = fwrite($socket, $data);
                if ($written === FALSE)
                    break;

                $logging->info(
                    "#%(id)d Send %(written)d bytes to %(peer)s",
                    array('id' => $id, 'peer' => $peer, 'written' => $written)
                );
                $logging->info('%s', array(escape(substr($data, 0, $written))));
                $data   = substr($data, $written);
                $size  -= $written;
            }
        }
    }
}

main();

