<?xml version="1.0"?>
<project name="pssht" description="Same as 'phing all'" default="all">
    <property name="qa.coverage.force" value="false"/>

    <fileset dir="." id="phar.files">
        <include name="src/**/*.php"/>
    </fileset>

    <fileset dir="src/" id="sources">
        <include name="**/*.php"/>
    </fileset>

    <fileset dir="tests/" id="tests">
        <include name="unit/**/*.php"/>
    </fileset>

    <import file="vendor/erebot/buildenv/phing/tasks.xml"/>
    <property name="tagfiles"                   value=""/>
    <property name="phar.stub"                  value="vendor/erebot/buildenv/stub.php"/>
    <property name="skip.update_catalog"        value="true"/>
    <property name="subfile.phpcs"              value="buildenv/phing_phpcs.xml"/>
    <property name="subfile.pdepend"            value="vendor/erebot/buildenv/phing/pdepend.xml"/>
    <property name="subfile.phpmd"              value="vendor/erebot/buildenv/phing/phpmd.xml"/>
    <property name="subfile.phpcpd"             value="vendor/erebot/buildenv/phing/phpcpd.xml"/>
    <property name="subfile.coverage.pre"       value="vendor/erebot/buildenv/phing/pre_coverage.xml"/>
    <property name="subfile.phpunit"            value="buildenv/phing_phpunit.xml"/>
    <property name="subfile.coverage"           value="vendor/erebot/buildenv/phing/coverage.xml"/>
    <property name="subfile.behat"              value="buildenv/phing_behat.xml"/>
    <property name="qa.coverage.db"             value="build/${phing.project.name}.db"/>
    <property name="qa.coverage.tmp"            value="build/${phing.project.name}.xml"/>
    <property name="qa.coverage.min.project"    value="0"/>
    <property name="qa.coverage.min.class"      value="0"/>
    <property name="qa.coverage.min.method"     value="0"/>

    <tstamp>
        <!-- Format is, e.g. "Sat, 03 Oct 2009, 16:31" -->
        <format property="buildtime" pattern="%a, %d %b %Y, %H:%M"/>
    </tstamp>

    <!-- Detect the current version. -->
    <exec command="php get_version.php" checkreturn="true" outputProperty="version"/>
    <!-- Detect and normalize the current version. -->
    <exec command="php get_version.php -N" checkreturn="true" outputProperty="normalizedVersion"/>
    <!-- Detect the HEAD's SHA1 -->
    <exec command="git rev-parse HEAD 2> /dev/null" checkreturn="true" outputProperty="commit"/>
    <!-- Detect composer name -->
    <exec command="php get_version.php -C" checkreturn="true" outputProperty="composerName"/>

    <!-- Include Composer autoloader. -->
    <php expression="require_once('vendor/autoload.php');" level="debug"/>

    <target name="all"
        description="Main target -- Does nothing"/>

    <!-- Release process -->
    <target name="release" depends="all"
        description="Build a PHAR package from the current code">
        <if>
            <and>
                <isset property="opensslkey"/>
                <isset property="opensslpassfile"/>
                <available extension="openssl"/>
            </and>
            <then>
                <property override="true" name="signature" value="openssl"/>
                <loadfile file="${opensslpassfile}" property="keypassword">
                    <filterchain><striplinebreaks/></filterchain>
                </loadfile>
            </then>
            <else>
                <property override="true" name="signature" value="sha1"/>
            </else>
        </if>

        <!-- condition overrides previous property affectations. -->
        <condition property="compression" value="gzip">
            <available extension="zlib"/>
        </condition>
        <condition property="compression" value="bzip2">
            <available extension="bz2"/>
        </condition>
        <property name="compression" value="none"/>

        <mkdir dir="build"/>
        <pharpackage
            destfile="build/${phing.project.name}-${version}.phar"
            basedir="./"
            stub="${phar.stub}"
            alias="${phing.project.name}"
            signature="${signature}"
            key="${opensslkey}"
            keypassword="${keypassword}"
            compression="${compression}"
        >
            <fileset dir=".">
                <include name="composer.json"/>
                <include name="composer.lock"/>
                <include name="LICENSE"/>
                <include name="LICENSE.*"/>
                <include name="LICENCE"/>
                <include name="LICENCE.*"/>
                <include name="README"/>
                <include name="README.*"/>
                <include name="src/**"/>
            </fileset>
            <fileset refid="phar.files"/>
            <metadata>
                <element name="realname"    value="${phing.project.name}"/>
                <element name="version"     value="${version}"/>
                <element name="commit"      value="${commit}"/>
                <element name="name"        value="${composerName}"/>
            </metadata>
        </pharpackage>
        <chmod file="build/${phing.project.name}-${version}.phar" mode="0755"/>
    </target>

    <!-- Documentation -->
    <target name="doc" depends="doc_html"
        description="Generate documentation"/>

    <target name="doc_html" description="Generate documentation in HTML format" depends="doc_api,doc_enduser"/>

    <target name="doc_api" description="Generate API documentation in HTML format">
        <exec command="php vendor/erebot/buildenv/get_composer.php description"
            outputProperty="short_description" checkreturn="true"/>

        <!-- Determine path to tag files. -->
        <property name="tagfiles.reference" value="${phing.project.name}"/>
        <exec command="php vendor/erebot/buildenv/get_filetags.php ${tagfiles.reference} ${tagfiles}"
            checkreturn="true" outputProperty="tagfiles"/>
        <php function="escapeshellarg" returnProperty="tagfiles">
            <param value="${tagfiles}"/>
        </php>

        <exec command="php buildenv/doxygen_exceptions.php"/>
        <exec command="COMPONENT_NAME=${phing.project.name} COMPONENT_VERSION=${version} COMPONENT_BRIEF=&#34;${short_description}&#34; COMPONENT_TAGFILES=${tagfiles} doxygen 2>&amp;1 | grep -v docs/exceptions.php"
            dir="." passthru="true" checkreturn="true" logoutput="true"/>
    </target>

    <target name="doc_enduser" description="Generate end-user documentation in HTML format">
        <property name="doc_release" value=""/>
        <exec command="SPHINX_VERSION=${version} SPHINX_RELEASE=${version}${doc_release} SPHINX_PROJECT=${phing.project.name} sphinx-build -c vendor/erebot/buildenv/sphinx/ -b html -D html_use_opensearch=http://erebot.github.com/${phing.project.name} -d docs/enduser/doctrees docs/src docs/enduser/html"
            passthru="true" checkreturn="true" logoutput="true"/>
    </target>


    <!-- Unit tests and code coverage -->
    <target name="test" depends="prepare_test,bare_test"
        description="Run tests and generate code coverage reports (same as 'phing qa_coverage')" />
    <target name="tests" depends="prepare_test,bare_test"
        description="Same as 'phing test'"/>
    <target name="coverage" depends="prepare_test,bare_test"
        description="Same as 'phing test'"/>
    <target name="prepare_test" depends="all"
        description="Tasks to do before running the test suite"/>
    <target name="bare_test" depends="qa_coverage,qa_behat"
        description="Run the tests without any preparations"/>


    <!-- Quality Assurance -->
    <target name="qa"
        depends="qa_lint,qa_codesniffer,qa_depend,qa_mess,qa_duplicates,qa_test"
        description="Run Qualify-Assurance (QA) tools"/>

    <target name="qa_lint" description="Check QA using phplint">
        <phplint><fileset refid="sources"/></phplint>
    </target>

    <target name="qa_codesniffer" description="Check QA using PHP_CodeSniffer">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpcs" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "squizlabs/php_codesniffer" package (&gt;=1.2.2) must be installed
            for the "qa_codesniffer" target to be available.
        </fail>
        <import file="${subfile.phpcs}"/>
    </target>

    <target name="qa_depend"
        description="Check QA using PHP depend">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/pdepend" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "pdepend/pdepend" package must be installed
            for the "qa_depend" target to be available.
        </fail>
        <import file="${subfile.pdepend}"/>
    </target>

    <target name="qa_mess"
        description="Check QA using phpmd (PHP Mess Detector)">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpmd" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "phpmd/phpmd" package must be installed
            for the "qa_mess" target to be available.
        </fail>
        <import file="${subfile.phpmd}"/>
    </target>

    <target name="qa_duplicates"
        description="Check QA using phpcpd (PHP Copy/Paste Detector)">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpcpd" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "sebastian/phpcpd" package must be installed
            for the "qa_duplicates" target to be available.
        </fail>
        <import file="${subfile.phpcpd}"/>
    </target>

    <target name="qa_pre_coverage" hidden="true">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpunit" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "phpunit/phpunit" package must be installed
            for the "qa_pre_coverage" target to be available.
        </fail>
        <import file="${subfile.coverage.pre}"/>
    </target>

    <target name="qa_test" depends="qa_pre_coverage"
        description="Run (unit) tests using PHPUnit">
        <php expression="define('TESTENV_DIR', dirname('${phing.file}').DIRECTORY_SEPARATOR.'tests'.DIRECTORY_SEPARATOR.'testenv');"/>
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpunit" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "phpunit/phpunit" package must be installed
            for the "qa_test" target to be available.
        </fail>
        <import file="${subfile.phpunit}"/>
    </target>

    <target name="qa_coverage" depends="qa_test"
        description="Run code coverage analysis based on unit tests (see 'phing qa_test')">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpunit" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "phpunit/phpunit" package must be installed
            for the "qa_coverage" target to be available.
        </fail>
        <import file="${subfile.coverage}"/>
    </target>

    <target name="qa_behat"
        description="Run (behaviour) tests using Behat">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/behat" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "behat/behat" package must be installed
            for the "qa_behat" target to be available.
        </fail>
        <import file="${subfile.behat}"/>
    </target>
</project>
